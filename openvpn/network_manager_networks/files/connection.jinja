{%- from "openvpn/map.jinja" import multipart_param with context -%}
{%- set config = salt['pillar.get']('openvpn:network_manager:networks:'+network_name, {}) -%}
{%- macro pairs(data) -%}
{%-   for key, value in data|dictsort -%}
{{ key|replace('_', '-') }}={{ value }}
{%    endfor -%}
{%- endmacro -%}

[connection]
{%- if not 'id' in config.get('connection', {}) -%}
{%-   if '_name' in config %}
id={{ config.get('_name') }}
{%-   else %}
id={{ network_name }}
{%-   endif %}
{%- endif %}
uuid={{ salt['cmd.run']("python2 -c \"import uuid; print uuid.uuid5(uuid.NAMESPACE_DNS, '{}{}')\"".format(network_name, grains['id'])) }}
{{ pairs(config.get('connection', {})) }}

{%- for segment, data in config|dictsort -%}
{%-   if segment|list|first == '_' %}{% continue %}{% endif -%}
{%-   if segment == 'connection' %}{% continue %}{% endif %}
[{{ segment }}]
{%-   if segment == 'vpn' %}
{%-     if config[segment].get('service_type', 'org.freedesktop.NetworkManager.openvpn') == 'org.freedesktop.NetworkManager.openvpn' %}
{%-       set instance_name = config.get('_vpn_instance', network_name) %}
{%-       set instance_data = salt['pillar.get']('openvpn:client:'+instance_name, {}) %}
{%-       set vpn_data = salt['pillar.get']('openvpn:network_manager:networks:{}:{}'.format(network_name, segment), instance_data, True) %}
connection-type=tls
service-type={{ vpn_data.pop('service_type') }}

{%-       for key in ['ca', 'key', 'cert', 'remote_cert_tls'] -%}
{%-         if key in vpn_data %}
{{            key|replace('_', '-') }}={{ vpn_data.pop(key) }}
{%-         endif -%}
{%-       endfor %}

{%-       if 'ciphers' in vpn_data %}
cipher={{ vpn_data.pop('ciphers')|first }}
{%-       endif %}

{%-       if 'auths' in vpn_data %}
auth={{ vpn_data.pop('auths')|first }}
{%-       endif %}

{%-       set remote = vpn_data.pop('remote', False) %}
{%-       set port = vpn_data.pop('port', 1194) %}
{%-       if remote is iterable and not remote is string %}
{%-         set remote = remote|first %}
{%-       endif %}
{%-       if remote is string %}
{%-         set remote_pair = remote.split(' ') %}
{%-         set remote = remote_pair|first %}
{%-         if remote_pair|length > 1 %}
{%-           set port = remote_pair|last %}
{%-         endif %}
{%-       endif %}
{%-       if remote and port %}
remote={{ remote }}
port={{ port }}
{%-       endif %}

{%-       if 'tls_auth' in vpn_data %}
ta-dir={{ multipart_param(vpn_data.tls_auth, 1) }}
ta={{ multipart_param(vpn_data.tls_auth, 0) }}
{%-       endif -%}

{%-       if 'tun_mtu' in vpn_data %}
tunnel-mtu={{ vpn_data.pop('tun_mtu') }}
{%-       endif -%}

{%-       if 'comp_lzo' in vpn_data %}
comp-lzo={{ vpn_data.pop('comp_lzo') }}
{%-       endif -%}

{%-       if 'key_passphrase' in vpn_data and (grains['saltversioninfo'][0] > 2017 ) %}
{# 2016.11: x509.private_key_managed has no parameter 'passphrase' #}
cert-pass-flags=1
{%-       endif -%}

{%-       if vpn_data.pop('proto', 'udp') in ['tcp', 'tcp-client'] %}
proto-tcp=yes
{%-       endif -%}

{#- NOT WORKING IN Ubuntu 16.04 #}
{%-       if salt['grains.get']('osfinger') != 'Ubuntu-16.04' %}
{%-         if 'verify_x509_name' in vpn_data %}
tls-remote=/{{ vpn_data.pop('verify_x509_name')|replace(', ', '/')|replace("'", "") }}
{%-         endif -%}
{%-       endif -%}

{%-     endif -%}
{%-   else %}{# not 'vpn' #}
{{      pairs(config[segment]) }}
{%-   endif %}
{%- endfor -%}
